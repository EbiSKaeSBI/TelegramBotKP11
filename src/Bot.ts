import { Bot, session, Keyboard, InputFile } from 'grammy';
import * as dotenv from "dotenv";
dotenv.config();

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã
import { processUserMessage } from './services/flowise-ai';
import { sessionMiddleware, adminCheckMiddleware, errorHandler } from './middleware';
import { SessionData, FAQ, Complaint, MyContext } from './types';
import * as complaintService from './services/complaints';
import * as userService from './services/users';
import * as professionStoriesService from './services/professionStories';
import * as faqService from './services/faq';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!process.env.TELEGRAM_BOT_TOKEN) {
    throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–µ–ª–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π)
async function mainMenu(isAdmin = false, userId?: number) {
    const kb = new Keyboard()
        .text("üìö –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        .text("üå± –í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å")
        .row()
        .text("‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        .text("‚úâÔ∏è –ñ–∞–ª–æ–±–∞/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
        .row()
        .text("üß≠ –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è")
        .text("üîç –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞");
    if (userId) {
        const user = await userService.getUser(userId);
        if (user) {
            kb.row().text("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç");
        }
    }
    if (isAdmin) {
        kb.row().text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å");
    }
    return kb.resized();
}

// –ü–æ–¥–º–µ–Ω—é –¥–ª—è –±–ª–æ–∫–∞ 1
function eduProcessMenu() {
    return new Keyboard()
        .text("üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        .row()
        .text("üìñ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º")
        .row()
        .text("üéì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
        .row()
        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        .resized();
}

// –ü–æ–¥–º–µ–Ω—é –¥–ª—è –±–ª–æ–∫–∞ 2
function upbringingMenu() {
    return new Keyboard()
        .text("üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
        .row()
        .text("ü§ù –í–Ω–µ—É—Ä–æ—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å ¬´–ë—ã—Ç—å –≤–º–µ—Å—Ç–µ¬ª")
        .row()
        .text("üïäÔ∏è –°–ª—É–∂–±–∞ –ø—Ä–∏–º–∏—Ä–µ–Ω–∏—è")
        .row()
        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        .resized();
}

// –ü–æ–¥–º–µ–Ω—é –¥–ª—è –±–ª–æ–∫–∞ 5
function profOrientationMenu() {
    return new Keyboard()
        .text("üó£Ô∏è –•–æ—á—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏")
        .row()
        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        .resized();
}

// –ú–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
function parentCabinetMenu() {
    return new Keyboard()
        .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email")
        .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û")
        .row()
        .text("üìÑ –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
        .row()
        .text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized();
}

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
const bot = new Bot<MyContext>(process.env.TELEGRAM_BOT_TOKEN);

// –ò—Å–ø–æ–ª—å–∑—É–µ–º middleware
bot.use(sessionMiddleware);
bot.use(adminCheckMiddleware);
errorHandler(bot);

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function adminPanelMenu() {
    return new Keyboard()
        .text("üìã –ñ–∞–ª–æ–±—ã")
        .row()
        .text("‚ùì FAQ")
        .row()
        .text("üì¨ –ò—Å—Ç–æ—Ä–∏–∏ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏")
        .row()
        .text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        .resized();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
    // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –¥–∞–∂–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    await ctx.replyWithPhoto(
        new InputFile('./src/assets/owl_hi.png'),
        {
            caption: '–ü—Ä–∏–≤–µ—Ç! –Ø - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ö–æ–ª–ª–µ–¥–∂–∞ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ ‚Ññ11. ' +
            '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:',
            reply_markup: await mainMenu(ctx.session.isAdmin, ctx.from?.id)
        }
    )
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.hears("üìö –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞", async (ctx) => {
    ctx.session.state = 'edu_process';
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", { reply_markup: eduProcessMenu() });
});

bot.hears("üå± –í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å", async (ctx) => {
    ctx.session.state = 'upbringing';
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", { reply_markup: upbringingMenu() });
});

bot.hears("üß≠ –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è", async (ctx) => {
    ctx.session.state = 'prof_orientation';
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", { reply_markup: profOrientationMenu() });
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (—Ä–∞–∑–º–µ—â–∞—é –≤—ã—à–µ bot.on('message:text')) ---
bot.hears("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email", async (ctx) => {
    ctx.session.state = "change_email";
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:", { reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized() });
});

bot.hears("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", async (ctx) => {
    ctx.session.state = "change_name";
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –§–ò–û:", { reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized() });
});

bot.hears("üìÑ –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", async (ctx) => {
    if (!ctx.from?.id) return;
    const userId = ctx.from.id;
    let message = '–í–∞—à–∏ –∂–∞–ª–æ–±—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n\n';
    const myComplaints = await complaintService.getUserComplaints(userId);
    if (myComplaints.length === 0) message += '–ñ–∞–ª–æ–±/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç.';
    myComplaints.forEach((complaint: any) => {
        let statusDisplay: string;
        if (complaint.status === 'CLOSED') statusDisplay = '–∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        else if (complaint.status === 'REVIEWED') statusDisplay = '—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞';
        else statusDisplay = '–Ω–æ–≤–∞—è';
        message += `‚Ä¢ ${complaint.text}\n–°—Ç–∞—Ç—É—Å: ${statusDisplay}\n–î–∞—Ç–∞: ${complaint.createdAt.toLocaleString()}\n\n`;
    });
    message += '\n–í–∞—à–∏ —Ä–∞—Å—Å–∫–∞–∑—ã –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:\n\n';
    const myStories = await professionStoriesService.getUserStories(userId);
    if (myStories.length === 0) message += '–†–∞—Å—Å–∫–∞–∑–æ–≤ –Ω–µ—Ç.';
    myStories.forEach((story: any) => {
        message += `‚Ä¢ ${story.text}\n–°—Ç–∞—Ç—É—Å: ${story.status}\n–î–∞—Ç–∞: ${story.createdAt.toLocaleString()}\n\n`;
    });
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    const chunkSize = 3500;
    for (let i = 0; i < message.length; i += chunkSize) {
        await ctx.reply(message.slice(i, i + chunkSize), { reply_markup: parentCabinetMenu() });
    }
    ctx.session.state = "parent_cabinet";
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (—Ä–∞–∑–º–µ—â–∞—é –Ω–∏–∂–µ –≤—Å–µ—Ö –º–µ–Ω—é, –Ω–æ –≤—ã—à–µ catch-all) ---
bot.hears("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", async (ctx) => {
    ctx.session.state = "parent_cabinet";
    await ctx.reply("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", { reply_markup: parentCabinetMenu() });
});


// FAQ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∞–¥–º–∏–Ω–∫–∞)
bot.hears("‚ùì FAQ", async (ctx) => {
    if (!ctx.session.isAdmin) return;
    ctx.session.state = "admin_panel_faq";
    const faqs = await faqService.getAllFaqs();
    let text = "–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ FAQ:\n";
    faqs.forEach((faq: any, i: number) => {
        text += `${i + 1}. ${faq.question}\n`;
    });
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
    const kb = new Keyboard()
        .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å FAQ")
        .text("‚ûñ –£–¥–∞–ª–∏—Ç—å FAQ")
        .row()
        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å").resized();
    await ctx.reply(text, { reply_markup: kb });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ (–ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ)
bot.hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å FAQ", async (ctx) => {
    if (!ctx.session.isAdmin) return;
    ctx.session.state = "admin_faq_add_question";
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:", { reply_markup: new Keyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å").resized() });
});

// –£–¥–∞–ª–µ–Ω–∏–µ FAQ (–≤—ã–±–æ—Ä)
bot.hears("‚ûñ –£–¥–∞–ª–∏—Ç—å FAQ", async (ctx) => {
    if (!ctx.session.isAdmin) return;
    const faqs = await faqService.getAllFaqs();
    if (faqs.length === 0) {
        await ctx.reply("FAQ –ø—É—Å—Ç.", { reply_markup: new Keyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å").resized() });
        return;
    }
    let text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä FAQ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n";
    faqs.forEach((faq: any, i: number) => {
        text += `${i + 1}. ${faq.question}\n`;
    });
    ctx.session.state = "admin_faq_delete";
    await ctx.reply(text, { reply_markup: new Keyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å").resized() });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è FAQ (–ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ)
bot.on("message:text", async (ctx, next) => {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ: –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
    if (ctx.session.state === "admin_faq_add_question") {
        ctx.session.faqDraft = { question: ctx.message.text.trim() };
        ctx.session.state = "admin_faq_add_answer";
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:", { reply_markup: new Keyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å").resized() });
        return;
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ: –≤–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
    if (ctx.session.state === "admin_faq_add_answer") {
        const answer = ctx.message.text.trim();
        const question = ctx.session.faqDraft?.question;
        if (!question || !answer) {
            await ctx.reply("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.");
            ctx.session.state = "admin_panel_faq";
            return;
        }
        await faqService.addFaq(question, answer);
        ctx.session.faqDraft = undefined;
        ctx.session.state = "admin_panel_faq";
        await ctx.reply("FAQ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", { reply_markup: new Keyboard().text("‚ùì FAQ").resized() });
        return;
    }
    // –£–¥–∞–ª–µ–Ω–∏–µ FAQ: –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
    if (ctx.session.state === "admin_faq_delete") {
        const num = Number(ctx.message.text.trim());
        const faqs = await faqService.getAllFaqs();
        if (isNaN(num) || num < 1 || num > faqs.length) {
            await ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
            return;
        }
        await faqService.deleteFaq(faqs[num - 1].id);
        ctx.session.state = "admin_panel_faq";
        await ctx.reply("FAQ —É–¥–∞–ª—ë–Ω.", { reply_markup: new Keyboard().text("‚ùì FAQ").resized() });
        return;
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –¥–ª—è –∂–∞–ª–æ–±—ã
    if (ctx.session.state === "awaiting_name_for_complaint") {
        if (!ctx.from?.id) return;
        await userService.upsertUser(ctx.from.id, ctx.message.text.trim());
        ctx.session.state = "awaiting_email_for_complaint";
        await ctx.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email:", {
            reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized()
        });
        return;
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º email –¥–ª—è –∂–∞–ª–æ–±—ã
    if (ctx.session.state === "awaiting_email_for_complaint") {
        if (!ctx.from?.id) return;
        const email = ctx.message.text.trim();
        if (!isValidEmail(email)) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, example@mail.ru):", {
                reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized()
            });
            return;
        }
        const user = await userService.getUser(ctx.from.id);
        await userService.upsertUser(ctx.from.id, user?.name ?? undefined, email);
        ctx.session.state = "awaiting_complaint";
        await ctx.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.", {
            reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized()
        });
        return;
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–∞ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    if (ctx.session.state === "awaiting_name_for_profession") {
        if (!ctx.from?.id) return;
        await userService.upsertUser(ctx.from.id, ctx.message.text.trim());
        ctx.session.state = "awaiting_email_for_profession";
        await ctx.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email:", {
            reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized()
        });
        return;
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º email –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–∞ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    if (ctx.session.state === "awaiting_email_for_profession") {
        if (!ctx.from?.id) return;
        const email = ctx.message.text.trim();
        if (!isValidEmail(email)) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, example@mail.ru):", {
                reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized()
            });
            return;
        }
        const user = await userService.getUser(ctx.from.id);
        await userService.upsertUser(ctx.from.id, user?.name ?? undefined, email);
        ctx.session.state = "awaiting_profession_story";
        await ctx.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.", {
            reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized()
        });
        return;
    }
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ email –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
    if (ctx.session.state === "change_email") {
        if (!ctx.from?.id) return;
        const email = ctx.message.text.trim();
        if (!isValidEmail(email)) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, example@mail.ru):", {
                reply_markup: parentCabinetMenu()
            });
            return;
        }
        const user = await userService.getUser(ctx.from.id);
        await userService.upsertUser(ctx.from.id, user?.name ?? undefined, email);
        ctx.session.state = "parent_cabinet";
        await ctx.reply("–í–∞—à email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!", { reply_markup: parentCabinetMenu() });
        return;
    }
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
    if (ctx.session.state === "change_name") {
        if (!ctx.from?.id) return;
        const name = ctx.message.text.trim();
        const user = await userService.getUser(ctx.from.id);
        await userService.upsertUser(ctx.from.id, name, user?.email ?? undefined);
        ctx.session.state = "parent_cabinet";
        await ctx.reply("–í–∞—à–∏ –§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!", { reply_markup: parentCabinetMenu() });
        return;
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–±—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if (ctx.session.state === "awaiting_complaint") {
        if (!ctx.from?.id) {
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }
        await complaintService.addComplaint(ctx.from.id, ctx.message.text);
        await ctx.reply(`–í–∞—à–∞ –∂–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –°–ø–∞—Å–∏–±–æ!`, { reply_markup: await mainMenu(ctx.session.isAdmin, ctx.from?.id) });
        ctx.session.state = undefined;
        return;
    }

    if (ctx.session.state === "awaiting_profession_story") {
        if (!ctx.from?.id) return;
        await professionStoriesService.addStory(ctx.from.id, ctx.message.text);
        await ctx.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à —Ä–∞—Å—Å–∫–∞–∑ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.", {
            reply_markup: await mainMenu(ctx.session.isAdmin, ctx.from?.id)
        });
        ctx.session.state = undefined;
        return;
    }

    await next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
bot.hears("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", async (ctx) => {
    if (!ctx.session.isAdmin) return;
    ctx.session.state = "admin_panel";
    await ctx.reply("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", { reply_markup: adminPanelMenu() });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.hears("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", async (ctx) => {
    ctx.session.state = undefined;
    await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", { reply_markup: await mainMenu(ctx.session.isAdmin, ctx.from?.id) });
});

// –ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ª–∏–º–∏—Ç–æ–º –Ω–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–Ω—É—é –∂–∞–ª–æ–±—É
bot.hears("üì¨ –ò—Å—Ç–æ—Ä–∏–∏ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", async (ctx) => {
    if (!ctx.session.isAdmin) return;
    const stories = await professionStoriesService.getAllStories();
    let message = 'üì¨ –ò—Å—Ç–æ—Ä–∏–∏ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:\n\n';
    if (stories.length === 0) message += '–ò—Å—Ç–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.';
    for (const story of stories) {
        const user = await userService.getUser(story.telegramId);
        const name = user?.name ? ` (${user.name})` : '';
        const email = user?.email ? `, email: ${user.email}` : '';
        message += `#${story.telegramId}${name}${email}: ${story.text}\n–°—Ç–∞—Ç—É—Å: ${story.status}\n–î–∞—Ç–∞: ${story.createdAt.toLocaleString()}\n\n`;
    }
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
    const chunkSize = 3500;
    for (let i = 0; i < message.length; i += chunkSize) {
        await ctx.reply(message.slice(i, i + chunkSize), { reply_markup: new Keyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å").resized() });
    }
    ctx.session.state = "admin_panel_profession_stories";
});

// –ñ–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ª–∏–º–∏—Ç–æ–º –Ω–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–Ω—É—é –∂–∞–ª–æ–±—É
bot.hears("‚úâÔ∏è –ñ–∞–ª–æ–±–∞/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", async (ctx) => {
    if (!ctx.from?.id) return;
    const userId = ctx.from.id;
    // –ù–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–ª—å–∫–æ –∏—â–µ–º
    const user = await userService.getUser(userId);
    if (!user) {
        ctx.session.state = "awaiting_name_for_complaint";
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è (–§–ò–û):", {
            reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized()
        });
        return;
    }
    const activeComplaints = await complaintService.getActiveComplaints(userId);
    if (activeComplaints.length > 0) {
        await ctx.reply("–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –µ—â—ë –Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä–æ–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é.", {
            reply_markup: await mainMenu(ctx.session.isAdmin, ctx.from?.id)
        });
        return;
    }
    if (!user.name) {
        ctx.session.state = "awaiting_name_for_complaint";
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è (–§–ò–û):", {
            reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized()
        });
        return;
    }
    if (!user.email) {
        ctx.session.state = "awaiting_email_for_complaint";
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email:", {
            reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized()
        });
        return;
    }
    ctx.session.state = "awaiting_complaint";
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.", {
        reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized()
    });
});

// –ö–Ω–æ–ø–∫–∞ '‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é' ‚Äî –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.hears("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", async (ctx) => {
    ctx.session.state = undefined;
    await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", { reply_markup: await mainMenu(ctx.session.isAdmin, ctx.from?.id) });
});

// –ö–Ω–æ–ø–∫–∞ 'üîç –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞' ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
bot.hears("üîç –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞", async (ctx) => {
    ctx.session.state = 'search';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç!', {
        reply_markup: new Keyboard().text("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é").resized()
    });
});

// --- –ë–ª–æ–∫ '‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã' —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ---
bot.hears("‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", async (ctx) => {
    ctx.session.state = "faq_page_0";
    const faqs = await faqService.getAllFaqs();
    const page = 0;
    const pageSize = 4;
    const totalPages = Math.ceil(faqs.length / pageSize);
    const faqsPage = faqs.slice(page * pageSize, (page + 1) * pageSize);
    const kb = new Keyboard();
    for (let i = 0; i < faqsPage.length; i += 2) {
        if (faqsPage[i + 1]) {
            kb.text(faqsPage[i].question).text(faqsPage[i + 1].question).row();
        } else {
            kb.text(faqsPage[i].question).row();
        }
    }
    let navRow = [];
    if (totalPages > 1 && page > 0) navRow.push("–ù–∞–∑–∞–¥");
    if (totalPages > 1 && page + 1 < totalPages) navRow.push("–î–∞–ª–µ–µ");
    navRow.push("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é");
    kb.row(...navRow);
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", { reply_markup: kb.resized() });
});

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è FAQ: –î–∞–ª–µ–µ
bot.hears("–î–∞–ª–µ–µ", async (ctx) => {
    if (!ctx.session.state?.startsWith("faq_page_")) return;
    const faqs = await faqService.getAllFaqs();
    let page = Number(ctx.session.state.replace("faq_page_", ""));
    const pageSize = 4;
    const totalPages = Math.ceil(faqs.length / pageSize);
    if (page + 1 >= totalPages) return;
    page++;
    const faqsPage = faqs.slice(page * pageSize, (page + 1) * pageSize);
    const kb = new Keyboard();
    for (let i = 0; i < faqsPage.length; i += 2) {
        if (faqsPage[i + 1]) {
            kb.text(faqsPage[i].question).text(faqsPage[i + 1].question).row();
        } else {
            kb.text(faqsPage[i].question).row();
        }
    }
    let navRow = [];
    if (totalPages > 1 && page > 0) navRow.push("–ù–∞–∑–∞–¥");
    if (totalPages > 1 && page + 1 < totalPages) navRow.push("–î–∞–ª–µ–µ");
    navRow.push("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é");
    kb.row(...navRow);
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", { reply_markup: kb.resized() });
    ctx.session.state = `faq_page_${page}`;
});

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è FAQ: –ù–∞–∑–∞–¥
bot.hears("–ù–∞–∑–∞–¥", async (ctx) => {
    if (!ctx.session.state?.startsWith("faq_page_")) return;
    const faqs = await faqService.getAllFaqs();
    let page = Number(ctx.session.state.replace("faq_page_", ""));
    if (page === 0) return;
    page--;
    const pageSize = 4;
    const totalPages = Math.ceil(faqs.length / pageSize);
    const faqsPage = faqs.slice(page * pageSize, (page + 1) * pageSize);
    const kb = new Keyboard();
    for (let i = 0; i < faqsPage.length; i += 2) {
        if (faqsPage[i + 1]) {
            kb.text(faqsPage[i].question).text(faqsPage[i + 1].question).row();
        } else {
            kb.text(faqsPage[i].question).row();
        }
    }
    let navRow = [];
    if (totalPages > 1 && page > 0) navRow.push("–ù–∞–∑–∞–¥");
    if (totalPages > 1 && page + 1 < totalPages) navRow.push("–î–∞–ª–µ–µ");
    navRow.push("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é");
    kb.row(...navRow);
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", { reply_markup: kb.resized() });
    ctx.session.state = `faq_page_${page}`;
});

// –û—Ç–≤–µ—Ç –Ω–∞ FAQ (–ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞)
bot.on("message:text", async (ctx, next) => {
    if (ctx.session.state?.startsWith("faq_page_")) {
        const faqs = await faqService.getAllFaqs();
        const faq = faqs.find((f: any) => f.question === ctx.message.text);
        if (faq) {
            // –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ (—Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            let page = Number(ctx.session.state.replace("faq_page_", ""));
            const pageSize = 4;
            const totalPages = Math.ceil(faqs.length / pageSize);
            const faqsPage = faqs.slice(page * pageSize, (page + 1) * pageSize);
            const kb = new Keyboard();
            for (let i = 0; i < faqsPage.length; i += 2) {
                if (faqsPage[i + 1]) {
                    kb.text(faqsPage[i].question).text(faqsPage[i + 1].question).row();
                } else {
                    kb.text(faqsPage[i].question).row();
                }
            }
            let navRow = [];
            if (totalPages > 1 && page > 0) navRow.push("–ù–∞–∑–∞–¥");
            if (totalPages > 1 && page + 1 < totalPages) navRow.push("–î–∞–ª–µ–µ");
            navRow.push("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é");
            kb.row(...navRow);
            await ctx.reply(`–í–æ–ø—Ä–æ—Å: ${faq.question}\n–û—Ç–≤–µ—Ç: ${faq.answer}`, { reply_markup: kb.resized() });
            return;
        }
    }
    await next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'
bot.hears("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", async (ctx) => {
    if (!ctx.session.isAdmin) return;
    ctx.session.state = "admin_panel";
    await ctx.reply("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", { reply_markup: adminPanelMenu() });
});

export const startBot = () => {
    console.log('Bot starting');
    return bot.start();
};

// --- –í–∞–ª–∏–¥–∞—Ü–∏—è email ---
function isValidEmail(email: string): boolean {
    // –ü—Ä–æ—Å—Ç–æ–π, –Ω–æ —Å—Ç—Ä–æ–≥–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
    return /^[\w.-]+@[\w.-]+\.[a-zA-Z]{2,}$/.test(email.trim());
}